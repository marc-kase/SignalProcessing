package tst.mark.signal.fft

/*
 * https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/
 * http://www.nayuki.io/res/free-small-fft-in-multiple-languages/Fft.java
 *
 */

import java.util.*

//val sample = arrayOf(1.000000, 0.616019, -0.074742, -0.867709, -1.513756, -1.814072, -1.695685, -1.238285, -0.641981, -0.148568, 0.052986, -0.099981, -0.519991, -1.004504, -1.316210, -1.277204, -0.840320, -0.109751, 0.697148, 1.332076, 1.610114, 1.479484, 1.039674, 0.500934, 0.100986, 0.011428, 0.270337, 0.767317, 1.286847, 1.593006, 1.522570, 1.050172, 0.300089, -0.500000, -1.105360, -1.347092, -1.195502, -0.769329, -0.287350, 0.018736, -0.003863, -0.368315, -0.942240, -1.498921, -1.805718, -1.715243, -1.223769, -0.474092, 0.298324, 0.855015, 1.045127, 0.861789, 0.442361, 0.012549, -0.203743, -0.073667, 0.391081, 1.037403, 1.629420, 1.939760, 1.838000, 1.341801, 0.610829, -0.114220, -0.603767, -0.726857, -0.500000, -0.078413, 0.306847, 0.441288, 0.212848, -0.342305, -1.051947, -1.673286, -1.986306, -1.878657, -1.389067, -0.692377, -0.032016, 0.373796, 0.415623, 0.133682, -0.299863, -0.650208, -0.713739, -0.399757, 0.231814, 0.991509, 1.632070, 1.942987, 1.831075, 1.355754, 0.705338, 0.123579, -0.184921, -0.133598, 0.213573, 0.668583, 0.994522, 1.000000, 1.000000, 0.616019, -0.074742, -0.867709, -1.513756, -1.814072, -1.695685, -1.238285, -0.641981, -0.148568, 0.052986, -0.099981, -0.519991, -1.004504, -1.316210, -1.277204, -0.840320, -0.109751, 0.697148, 1.332076, 1.610114, 1.479484, 1.039674, 0.500934, 0.100986, 0.011428, 0.270337, 1.000000)
val sample = arrayOf(0.0, 3.7274857339045764, 4.580127018922193, 2.353553390593274, -0.43301270189221885, -1.115113298208782, 0.4999999999999995, 2.08103912449785, 1.2990381056766598, -1.6464466094067252, -4.080127018922193, -3.468666688802058, -1.8982025386783976E-15, 3.4686666888020556, 4.0801270189221945, 1.6464466094067336, -1.2990381056766542, -2.08103912449785, -0.5000000000000014, 1.1151132982087808, 0.43301270189221885, -2.3535533905932713, -4.580127018922191, -3.727485733904585, -4.0413344371862654E-15, 3.727485733904579, 4.580127018922194, 2.3535533905932766, -0.43301270189221475, -1.115113298208782, 0.49999999999999045, 2.0810391244978486, 1.2990381056766656, -1.6464466094067332, -4.0801270189221945, -3.4686666888020565, -5.694607616035192E-15, 3.4686666888020494, 4.080127018922197, 1.6464466094067423, -1.2990381056766593, -2.0810391244978548, -0.5000000000000034, 1.11511329820878, 0.43301270189222746, -2.353553390593279, -4.580127018922187, -3.727485733904578, -8.082668874372531E-15, 3.7274857339045684, 4.58012701892219, 2.35355339059329, -0.4330127018922199, -1.1151132982087824, 0.4999999999999956, 2.081039124497852, 1.2990381056766673, -1.6464466094067083, -4.080127018922193, -3.4686666888020583, -3.702454370409587E-14, 3.4686666888020476, 4.080127018922199, 1.6464466094067234, -1.299038105676643, -2.081039124497851, -0.4999999999999912, 1.1151132982087792, 0.43301270189221586, -2.3535533905932553, -4.580127018922193, -3.7274857339045635, -1.2124003311558795E-14, 3.7274857339045484, 4.580127018922197, 2.353553390593272, -0.433012701892204, -1.1151132982087828, 0.4999999999999794, 2.0810391244978472, 1.299038105676655, -1.646446609406705, -4.080127018922176, -3.4686666888020445, -1.3287417770748783E-14, 3.468666688802061, 4.0801270189222, 1.64644660940677, -1.299038105676641, -2.0810391244978512, -0.4999999999999931, 1.1151132982087784, 0.43301270189224467, -2.3535533905932526, -4.580127018922192, -3.7274857339045653, -1.6165337748745062E-14, 3.7274857339045457, 4.580127018922199, 2.353553390593275, -0.43301270189222985, -1.115113298208784, 0.49999999999997746, 2.0810391244978472, 1.2990381056766567, -1.646446609406746, -4.080127018922192, -3.4686666888020787, -1.7083822848105578E-14, 3.4686666888020268, 4.080127018922185, 1.6464466094067294, -1.2990381056766391, -2.0810391244978526, -0.5000000000000235, 1.1151132982087875, 0.4330127018922195, -2.3535533905932495, -4.580127018922191, -3.727485733904603, -7.882644788613959E-14, 3.7274857339045786, 4.580127018922199, 2.3535533905933193, -0.43301270189220015, -1.1151132982087844, 0.5000000000000039, 2.0810391244978543, 1.2990381056766886, -1.646446609406699, -4.08012701892219, -3.468666688802049, 3.418683409594539E-14, 3.468666688802025, 4.080127018922202, 1.6464466094067323, -1.299038105676666, -2.0810391244978437, -0.5000000000000254, 1.1151132982087772, 0.4330127018922212, -2.353553390593205, -4.5801270189222025, -3.7274857339046052, -2.424800662311759E-14, 3.7274857339045764, 4.580127018922213, 2.3535533905932393, -0.43301270189219865, -1.1151132982087848, 0.500000000000002, 2.081039124497837, 1.2990381056766904, -1.646446609406696, -4.080127018922189, -3.4686666888020516, -7.974369502422693E-14, 3.4686666888020223, 4.080127018922203, 1.6464466094067354, -1.2990381056766642, -2.081039124497862, -0.5000000000000274, 1.1151132982087764, 0.433012701892278, -2.3535533905932025, -4.5801270189222025, -3.7274857339045373, -2.8289341060303857E-14, 3.7274857339045737, 4.580127018922189, 2.353553390593325, -0.4330127018921965, -1.115113298208786, 0.49999999999994316, 2.0810391244978366, 1.2990381056766922, -1.6464466094067807, -4.080127018922187, -3.468666688802053, 2.65940239412318E-14, 3.46866668880202, 4.080127018922204, 1.646446609406738, -1.2990381056766032, -2.0810391244978623, -0.5000000000000294, 1.115113298208795, 0.43301270189222507, -2.3535533905932824, -4.580127018922202, -3.7274857339046106, -3.2330675497490123E-14, 3.7274857339045715, 4.580127018922215, 2.353553390593328, -0.43301270189219476, -1.1151132982088052, 0.49999999999999806, 2.081039124497853, 1.2990381056766358, -1.6464466094066899, -4.0801270189221865, -3.4686666888020556, -8.733650517894053E-14, 3.468666688802019, 4.080127018922204, 1.646446609406829, -1.29903810567666, -2.0810391244978463, -0.4999999999999745, 1.115113298208775, 0.4330127018922268, -2.3535533905932793, -4.580127018922175, -3.727485733904613, -3.637200993467639E-14, 3.7274857339044987, 4.580127018922216, 2.353553390593248, -0.4330127018922481, -1.1151132982087868, 0.49999999999999606, 2.0810391244978526, 1.299038105676696, -1.646446609406687, -4.080127018922186, -3.4686666888021214, -9.113291025629732E-14, 3.468666688802016, 4.080127018922175, 1.6464466094067445, -1.299038105676658, -2.0810391244978463, -0.5000000000000333, 1.1151132982087748, 0.43301270189222874, -2.353553390593194, -4.580127018922174, -3.7274857339046155, -1.5765289577227918E-13, 3.727485733904567, 4.580127018922192, 2.353553390593251, -0.4330127018921909, -1.115113298208788, 0.4999999999999373, 2.0810391244978517, 1.2990381056766984, -1.6464466094065962, -4.080127018922185, -3.4686666888019957, 1.520480870916142E-14, 3.468666688802014, 4.080127018922176, 1.6464466094067474, -1.299038105676597, -2.0810391244978472, -0.5000000000000353, 1.1151132982087548, 0.4330127018922309, -2.353553390593191, -4.580127018922198, -3.7274857339046177, 7.278487259136761E-14, 3.7274857339045644, 4.580127018922218, 2.3535533905932535, -0.43301270189218893, -1.115113298208807, 0.4999999999999922, 2.081039124497834, 1.2990381056766416, -1.6464466094066807, -4.080127018922214, -3.4686666888020623, -9.872572041101091E-14, 3.4686666888020756, 4.080127018922209, 1.6464466094068382, -1.2990381056766542, -2.081039124497865, -0.500000000000094, 1.1151132982087735, 0.43301270189217755, -2.353553390593271, -4.580127018922172, -3.7274857339045497, -4.849601324623518E-14, 3.727485733904491, 4.580127018922193, 2.3535533905933392, -0.43301270189213215, -1.1151132982087888, 0.5000000000000471, 2.081039124497851, 1.2990381056767022, -1.6464466094067656, -4.080127018922182, -3.468666688802128, 7.611998554447828E-15, 3.4686666888020095, 4.080127018922241, 1.6464466094067536, -1.2990381056765934, -2.0810391244978486, -0.5000000000000392, 1.115113298208792, 0.43301270189223434, -2.3535533905931856, -4.580127018922197, -3.727485733904622, -1.6977689908383798E-13, 3.7274857339045595, 4.580127018922219, 2.3535533905932597, -0.43301270189218505, -1.1151132982087706, 0.49999999999998823, 2.081039124497833, 1.2990381056766458, -1.6464466094066748, -4.08012701892215, -3.4686666888020667, -1.063185305657245E-13, 3.4686666888019437, 4.0801270189222105, 1.6464466094066688, -1.2990381056765328, -2.081039124497866, -0.500000000000098, 1.1151132982087721, 0.43301270189218144, -2.353553390593265, -4.580127018922221, -3.727485733904696, -5.6578682120607714E-14, 3.727485733904486, 4.5801270189221945, 2.353553390593345, -0.43301270189223845, -1.1151132982088283, 0.49999999999992945, 2.0810391244978494, 1.2990381056767064, -1.6464466094067596, -4.08012701892218, -3.468666688802005, -2.202490596858968E-13, 3.468666688802005, 4.0801270189222425, 1.6464466094067596, -1.2990381056765896, -2.0810391244978494, -0.49999999999992945, 1.1151132982087524, 0.433012701892238, -2.35355339059318, -4.5801270189221945, -3.7274857339046275, 5.661953484262255E-14, 3.727485733904413, 4.580127018922221, 2.353553390593265, -0.43301270189218144, -1.1151132982087721, 0.49999999999998435, 2.0810391244978663, 1.2990381056767673, -1.6464466094066688, -4.0801270189221475, -3.4686666888020707, -1.1391134072043807E-13, 3.4686666888020667, 4.08012701892215, 1.6464466094068502, -1.2990381056766458, -2.081039124497867, -0.49999999999998823, 1.115113298208771, 0.43301270189218505, -2.353553390593094, -4.580127018922169, -3.7274857339047007, -6.466135099498025E-14, 3.727485733904622, 4.580127018922197, 2.353553390593185, -0.4330127018921242, -1.115113298208792, 0.4999999999999255, 2.0810391244978486, 1.2990381056767106, -1.6464466094067536, -4.080127018922115, -3.4686666888021365, -7.57362175497935E-15, 3.4686666888020006, 4.080127018922182, 1.6464466094067656, -1.2990381056767026, -2.0810391244978845, -0.5000000000000471, 1.115113298208751, 0.43301270189224184, -2.353553390593174, -4.580127018922193, -3.727485733904491, -1.8594223683258305E-13, 3.7274857339045497, 4.580127018922223, 2.353553390593271, -0.43301270189217755, -1.1151132982087735, 0.4999999999998667, 2.081039124497831, 1.2990381056766542, -1.6464466094066628, -4.080127018922209, -3.4686666888020756, 9.876409721047937E-14, 3.468666688801935, 4.080127018922214, 1.6464466094068566, -1.2990381056766416, -2.081039124497868, -0.4999999999999922, 1.1151132982088074, 0.43301270189229907, -2.3535533905932535, -4.580127018922167, -3.7274857339045644, -7.274401986935278E-14, 3.7274857339046177, 4.580127018922249, 2.3535533905933566, -0.43301270189212077, -1.1151132982087928, 0.5000000000000353, 2.0810391244978472, 1.299038105676597, -1.646446609406572, -4.080127018922176, -3.468666688802141, -1.516643190969294E-14, 3.4686666888019957, 4.080127018922185, 1.646446609406947, -1.2990381056765812, -2.081039124497852, -0.500000000000051, 1.115113298208788, 0.4330127018922457, -2.3535533905933335, -4.580127018922141, -3.7274857339046377, -1.9402490570695557E-13, 3.727485733904545, 4.580127018922225, 2.3535533905932766, -0.4330127018922838, -1.1151132982088128, 0.4999999999999765, 2.0810391244978295, 1.299038105676658, -1.6464466094066568, -4.080127018922206, -3.4686666888022075, -1.2909696102986525E-13, 3.46866668880193, 4.080127018922217, 1.646446609406687, -1.2990381056766376, -2.0810391244978352, -0.5000000000001098, 1.115113298208768, 0.4330127018923032, -2.353553390593248, -4.580127018922165, -3.727485733904569, -3.1530579154455836E-13, 3.727485733904472, 4.5801270189222, 2.353553390593362, -0.4330127018922268, -1.1151132982087937, 0.5000000000000314, 2.0810391244978117, 1.2990381056767186, -1.6464466094065657, -4.080127018922173, -3.468666688802018, -2.4302749015003757E-13, 3.4686666888019917, 4.0801270189221865, 1.6464466094066021, -1.2990381056765772, -2.081039124497853, -0.5000000000001685, 1.1151132982087484, 0.43301270189224983, -2.353553390593328, -4.580127018922241, -3.7274857339046417, 3.237152821950495E-14, 3.7274857339043983, 4.5801270189222265, 2.3535533905932824, -0.43301270189228014, -1.1151132982088139, 0.4999999999999726, 2.081039124497794)

fun radix2(real: DoubleArray, imag: DoubleArray) {
    // Initialization
    if (real.size() != imag.size())
        throw IllegalArgumentException("Mismatched lengths")
    val n = real.size()
    val levels = 31 - Integer.numberOfLeadingZeros(n)  // Equal to floor(log2(n))
    if (1 shl levels != n)
        throw IllegalArgumentException("Length is not a power of 2")
    val cosTable = DoubleArray(n / 2)
    val sinTable = DoubleArray(n / 2)
    for (i in 0..n / 2 - 1) {
        cosTable[i] = Math.cos(2.0 * Math.PI * i.toDouble() / n)
        sinTable[i] = Math.sin(2.0 * Math.PI * i.toDouble() / n)
    }

    // Bit-reversed addressing permutation
    for (i in 0..n - 1) {
        val j = Integer.reverse(i).ushr((32 - levels))
        if (j > i) {
            var temp = real[i]
            real[i] = real[j]
            real[j] = temp
            temp = imag[i]
            imag[i] = imag[j]
            imag[j] = temp
        }
    }

    // Cooley-Tukey decimation-in-time radix-2 FFT
    var size = 2
    while (size <= n) {
        val halfsize = size / 2
        val tablestep = n / size
        var i = 0
        while (i < n) {
            var j = i
            var k = 0
            while (j < i + halfsize) {
                val tpre = real[j + halfsize] * cosTable[k] + imag[j + halfsize] * sinTable[k]
                val tpim = -real[j + halfsize] * sinTable[k] + imag[j + halfsize] * cosTable[k]
                real[j + halfsize] = real[j] - tpre
                imag[j + halfsize] = imag[j] - tpim
                real[j] += tpre
                imag[j] += tpim
                j++
                k += tablestep
            }
            i += size
        }
        if (size == n)
        // Prevent overflow in 'size *= 2'
            break
        size *= 2
    }

    for (t in real.indices) {
        //            println("${real[t]}  ${imag[t]}")
        println("${toFreq(t, sample.size(), 128.0)}  ${Math.abs(real[t] * real[t] - imag[t] * imag[t])}")
    }
}

public fun fft(x: DoubleArray, y: DoubleArray) {
    var i: Int
    var j: Int
    var k: Int
    var n1: Int
    var n2: Int
    var a: Int
    val c: Double
    val s: Double
    var t1: Double
    val t2: Double

    val n = x.size()
    val m = (Math.log(n.toDouble()) / Math.log(2.0)).toInt()

    // precompute tables
    val cos = DoubleArray(n / 2)
    val sin = DoubleArray(n / 2)

    for (t in 0..n / 2 - 1) {
        cos[t] = Math.cos(-2.0 * Math.PI * t.toDouble() / n)
        sin[t] = Math.sin(-2.0 * Math.PI * t.toDouble() / n)
    }

    // Bit-reverse
    j = 0
    n2 = n / 2
    i = 1
    while (i < n - 1) {
        n1 = n2
        while (j >= n1) {
            j -= n1
            n1 /= 2
        }
        j += n1

        if (i < j) {
            t1 = x[i]
            x[i] = x[j]
            x[j] = t1
            t1 = y[i]
            y[i] = y[j]
            y[j] = t1
        }
        i++
    }

    // FFT
    n2 = 1

    i = 0
    while (i < m) {
        n1 = n2
        n2 += n2
        a = 0

        j = 0
        while (j < n1) {
            c = cos[a]
            s = sin[a]
            a += 1 shl (m - i - 1)

            k = j
            while (k < n) {
                t1 = c * x[k + n1] - s * y[k + n1]
                t2 = s * x[k + n1] + c * y[k + n1]
                x[k + n1] = x[k] - t1
                y[k + n1] = y[k] - t2
                x[k] = x[k] + t1
                y[k] = y[k] + t2
                k += n2
            }
            j++
        }
        i++
    }

    for (t in x.indices) {
        println("${toFreq(t, sample.size(), 128.0)}  ${Math.abs(x[t] * x[t] - y[t] * y[t])}")
    }
}

val random = Random()

fun randomReals(size: Int): DoubleArray {
    val result = DoubleArray(size)
    for (i in result.indices)
        result[i] = random.nextDouble() * 2 - 1
    return result
}

fun getSignal(size: Int): DoubleArray {
    val result = DoubleArray(size)
    val A = 3
    val B = 2
    val C = 0.5

    for (i in result.indices) {
        result[i] = A * Math.sin(Math.PI * i / 3) + B * Math.sin(Math.PI * i / 6) + C * Math.sin(Math.PI * i / 12)
        print("${result[i]}, ")
    }
    return result
}

fun toFreq(k: Int, N: Int, fs: Double): Double {
    //    k - decomposition level
    //    N - sample size
    //    fs - sampling frequency
    return k * fs / N
}


fun main(args: Array<String>) {

    val t1 = System.currentTimeMillis()
    val size = 1 shl 10
    val inputreal = getSignal(size)
    //    val inputimag = randomReals(size)
    val inputimag = Array(inputreal.size(), { 0.0 })

    println()
    println(inputreal.size())
    radix2(inputreal, inputimag.toDoubleArray())
//    fft(inputreal, inputimag.toDoubleArray())

    //    println(sample.size())
    //    val inputimag = Array(sample.size(), { 0.0 })
    //    radix2(sample.toDoubleArray(), inputimag.toDoubleArray())

    println(System.currentTimeMillis() - t1)
}